Django forms:

1) Quickly generate HTML form widgets

2) Validate data and process it into a Python Data Structure

3) Create form versions of our Models, quickly update models from Forms

*******************************************************************************

1) the first thing we need to do is create a forms.py file inside the application

1a) After that we call Django's built in forms classes (looks similar to creating models)

Example of a form:

from django import forms

class FormName(forms.Form):
** every input is essentially a class object attribute **
   name = forms.CharField()
   email = forms.EmailField()
   text = forms.CharField(widget=forms.Textarea)

2) We need to show this by using view

2a) Inside our views.py file we need to import the forms ** either method is fine **
    (i) from . import forms (the dot means import from the same directory as the current .py file)
    (ii) from forms import FormName

3) We then create a new view for the form

  3a)
      def form_name_view(request):
        form = forms.FormName()
        return render(request, 'form_name.html', {'form':form})

4) Then we just add the view to the app's urls, either directly or with include()

  4a) Directly
              from basicapp import views
              urlpatterns = [
                              url(r'formpage/',views.form_name_view, name = 'form_name')
              ]

5) We can then create the templates folder along with the html file that will hold the template tagging for the form

6) Remember to update the settings.py file to reflect the TEMPLATE_DIR variable!

7) Also remember that your views should reflect subdirectories inside templates

 ************* everything is setup to go into the form_name.html file inside
                templates/basicapp and add in the actual template tagging that will create the django form


There are several ways you can "inject" the form using template tagging. You can just pass in the key from the
context dictionary:
    {{ form }}

HTTP : hypertext transfer protocol and is designed to enable communication between a client and a server
       The client submits a request, the server then responds
       The most commonly used methods for this request/response protocol are GET and PROTOCOL

GET: requests data from a resource
POST: submits data to be process to a resource

This formats our form
<div class="container">
<form method="Post">
{{ form.as_p }}  --> formats using p tags
{% csrf_token %} --> this is A SECURITY MEASURE --> this a cross-site request Forgery(CSRF) token, which secures the HTTP POST action that is initiated
                                                --> on the subsequent submission of a form
<input type="submit" class="btn btn-primary" value="Submit">
</form>
<div>
*********
The django framework requires the CSRF token to be present
If it is not there, your form may not work!!

It works by using a "hidden input" which is a random code and checking that it matches the user's local site page
********

The submit button we created in the code above does NOTHING
We need to inform the view that if we a POST back, we should check if the data is valid
AND IF SO, grab that data

We do this by editing the view.
Upon receiving a validated form, we can access a dictionary like attribute of the "cleaned_data"

END RESULT EXAMPLE:

def form_name_view(request):
  form = forms.FormName()

  #Check to see if we get a POST back
  if request.method == 'POST':
    # In which case we pass in that request
      form = forms.FormName(request.POST)

      #Check to see form is valid
      if form.is_valid():
      #Do something
        print("Form validation success. Prints in console")
        print("Name".form.cleaned_data['name'])
        print("Email"+form.cleaned_data['email'])
        print("Text"+form.cleaned_data['text'])
    return render(request,'basicapp/form_page.html',{'form':form})
