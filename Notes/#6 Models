** Models Overview

- We use Models to incorporate a database into a Django Project
- Django comes equipped with SQLite
- SQlite will work for simple examples, which we're gonna do, but Django can connect to a variety of SQL engine backends


- In the settings.py file you can edit the ENGINE parameter used for Database
- To create an actual model, we use a class structure inside of the relevant applications models.py file

- This class object will be a subclass of Django's built-in class:
      - django.db.models.Model

- Then each attribute of the class represents a field, which is just like a column name with constraints in SQL

|--------------------------------------------|--Table 1
| Website_id | WebSiteName | URL             |    Quick review of SQL database:
|------------|-------------|-----------------|                                  SQL operates like a giant table
|     1      | Google      | www.google.com  |                                  Each column represents a field ==> each column has a type of field, such as Charfield, IntegerField, DateField, etc
|------------|-------------|-----------------|                                  Each row represent an entry
|     2      | Facebook    |www.facebook.com |
|____________|_____________|_________________|    Each field can also have constraints ==> Charfield has a max_length constraint

                                                  Table (or models as django calls them) will often reference each other, which is done by primary/foreign keys
_________________________________________Table 2
| Website_ID | Date Accessed         |
|____________|_______________________|
|      1     | 01-01-2018            |
|____________|_______________________|
|      2     | 02-03-2018            |
|____________|_______________________|

1) One stores website information
2) One stores date information

The website_id column in table 1 is a primary key, but in table 2 it is a foreign key

**** A primary key is unique identifier for each row in a table ****

**** A foreign key just denotes that the column coincides with a primary key of another table ****

examples:

class Topic(models.Model):
  top_name = models.CharField(max_length=264, unique = True)

class Webpage(models.Model):
  category = models.Foreignkey(Topic)
  name = models.CharField(max_length=264)
  url = models.URLField()

  def __str__(self):
    return self.name

After we've set up the models we can migrate the database
  --- This basically lets django do the heavy lifting of creating SQL databases that correspond to the models we created
  --- python manage.py migrate -----> is the command we would use

  --- Then register the changes to your app, show here with some generic 'app1':
      python manage.py makemigrations app1

Then migrate the database one more time:
  python manage.py migrate

IN order to use the more convenient ADMIN interface with the models however, we need to register them to our application's admin.py file

We can do this with this code:
                              from django.contrib import admin
                              from app.models import Model1, Model2

                              admin.site.register(Model1)
                              admin.site.register(Model2)

Then with the models and database created, we can use Django's fantastic Admin interface to interact with the database!

In order to fully use the database and the Admin, we need to CREATE A SUPERUSER
---> Providing a name, email, and password
---> python manage.py createsuperuser

Once we've set up the models, it's always a good idea to populate them with some test data
We will use a library to help with this called Faker and create a script to do this.


** Super user info **
username: lennygon
email   : lenny.gonzaleznyc@gmail.com
password: a193bcd144
